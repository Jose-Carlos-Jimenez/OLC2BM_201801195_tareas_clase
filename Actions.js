/**
 * @author Jose Carlos Jimenez
 * @carnet 201801195
*/

var count = 0; //This is a global counter to obtain 'Tn' expressions used in 3DC syntax.

/**
 * Class Node wich is used to implement a binary tree of expressions,
 * this help us to make the AST of the input.
 */
class Node {
    constructor(data, left, right) {
        this.data = data;
        this.left = left;
        this.right = right;
    }
}


const app = {
    /**
     * 
     * @param {*} root 
     */
    node: function(data, left, right) {
        return new Node(data, left, right);
    },

    /**
     * Generates the three direction code of the input expression.
     * @param {Root of the binary tree generated by Jison.} root 
     */
    traduct(root) {
        if (root != null) {
            if(root.left != null) var l = this.traduct(root.left);
            if(root.right != null) var r = this.traduct(root.right);
            // There we have actions part.
            let value;
            switch (root.data) {
                case '+':
                    value = {
                        c3d: l.c3d + r.c3d + "T" + count + " = " + l.temp + "+" + r.temp + "\n",
                        temp: "T" + count
                    };
                    count++;
                    return value;
                case '-':
                    value = {
                        c3d: l.c3d + r.c3d + "T" + count + " = " + l.temp + "-" + r.temp + "\n",
                        temp: "T" + count
                    };
                    count++;
                    return value;
                case '*':
                    value = {
                        c3d: l.c3d + r.c3d + "T" + count + " = " + l.temp + "*" + r.temp + "\n",
                        temp: "T" + count
                    };
                    count++;
                    return value;
                case '/':
                    value = {
                        c3d: l.c3d + r.c3d + "T" + count + " = " + l.temp + "/" + r.temp + "\n",
                        temp: "T" + count
                    };
                    count++;
                    return value;
                default:
                    value = {
                        c3d: "",
                        temp: root.data
                    };
                    return value;
            }
        }
    }
}


/**
 * Execute to obtain solution of the expression, actually working just with number literals.
 * @param {Root of the binary tree generated by Jison.} root 
 */

function execute(root) {
    if (root != null) {
        // There we have actions part.
        console.log(root.data);
        switch (root.data) {
            case '+':
                return execute(root.left) + execute(root.right);
            case '-':
                return execute(root.left) - execute(root.right);
            case '*':
                return execute(root.left) * execute(root.right);
            case '/':
                return execute(root.left) / execute(root.right);
            default:
                return root.data;
        }
    }
}

module.exports.app = app;